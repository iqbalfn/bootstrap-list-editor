{"version":3,"sources":["../../src/js/list-editor.js"],"names":["Default","editor","list","model","items","title","info","action","ListEditor","config","this","_config","_getConfig","_value","_el","document","querySelector","_activeIndex","_addElementsListener","_redrawItems","_this","addEventListener","e","preventDefault","value","fInput","i","elements","length","input","type","name","JSON","stringify","_drawItem","_updateModel","focus","$","on","target","closest","slideUp","f","remove","item","parse","dataset","object","index","select","animate","scrollTop","offset","top","_this2","safe","_hs","infos","forEach","field","tmpl","icon","push","join","actions","k","append","conf","j","text","replace","_this3","innerHTML","children","window"],"mappings":"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","sourcesContent":["/**\n * --------------------------------------------------------------------------\n * Bootstrap List Editor (v0.0.1): list-editor.js\n * --------------------------------------------------------------------------\n */\n\nimport $ from 'jquery'\n\nconst Default = {\n    editor: null,\n    list  : null,\n    model : null,\n    items : {\n        title : 'title',\n        info  : [], // [{field,icon,title},...],\n        action: [], // { edit: {icon,title}, remove: {icon,title}}\n    }\n}\n\nclass ListEditor {\n\n    constructor(config){\n        this._config    = this._getConfig(config)\n        this._value     = '[]'\n        this._el        = {\n            editor : document.querySelector(this._config.editor),\n            list   : document.querySelector(this._config.list),\n            model  : document.querySelector(this._config.model)\n        }\n        this._activeIndex = null\n\n        this._addElementsListener()\n        this._redrawItems();\n    }\n\n    // private\n\n    _addElementsListener(){\n        this._el.model.addEventListener('change', e => this._redrawItems())\n\n        this._el.editor.addEventListener('submit', e => {\n            e.preventDefault()\n\n            let value = {}\n            let fInput = null\n            for(let i=0; i<this._el.editor.elements.length; i++){\n                let input = this._el.editor.elements[i]\n                if(input.type === 'button')\n                    continue\n                value[ input.name ] = input.value\n                input.value = ''\n                if(!fInput)\n                    fInput = input\n            }\n\n            if(this._activeIndex){\n                this._value[this._activeIndex] = value\n                this._el.model.value = JSON.stringify(this._value)\n                this._redrawItems()\n            }else{\n                this._drawItem(value, this._value.length)\n                this._updateModel()\n            }\n\n            this._activeIndex = null\n\n            if(fInput)\n                fInput.focus()\n        })\n\n        $(this._el.list)\n        .on('click', '.btn-remove', e => {\n            e.preventDefault()\n            let list = e.target.closest('.list-editor-item')\n            $(list).slideUp(f => {\n                $(list).remove()\n                this._updateModel()\n            })\n        })\n        .on('click', '.btn-edit', e => {\n            e.preventDefault()\n            let list  = e.target.closest('.list-editor-item')\n            let item  = JSON.parse(list.dataset.object)\n            this._activeIndex = list.dataset.index\n\n            let fInput = null\n            for(let i=0; i<this._el.editor.elements.length; i++){\n                let input = this._el.editor.elements[i]\n\n                if(input.type === 'button')\n                    continue\n                input.value = item[input.name] || ''\n                if(!fInput)\n                    fInput = input\n            }\n\n            fInput.select()\n            $('html, body').animate({\n                scrollTop: $(this._el.editor).offset().top\n            })\n        })\n    }\n\n    _drawItem(item, index){\n        let safe = {\n            object: this._hs( JSON.stringify(item) ),\n            title : item[ this._config.items.title ]\n        }\n\n        let infos = []\n        this._config.items.info.forEach(info => {\n            if(!item[info.field])\n                return\n\n            let safe = {\n                title: this._hs( info.title ),\n                text : this._hs( item[info.field] ),\n                icon : info.icon || ''\n            }\n\n            let tmpl = `\n                <span title=\"${safe.title}\">\n                    ${safe.icon}\n                    ${safe.text}\n                </span>`\n\n            infos.push(tmpl)\n        })\n        infos = infos.join('&middot;')\n\n        let actions = []\n        for(let k in this._config.items.action){\n            let action = this._config.items.action[k]\n            let safe   = {\n                class: 'btn-' + k,\n                icon : action.icon || '',\n                title: this._hs( action.title || '' )\n            }\n\n            let tmpl = `\n                <a href=\"#0\" class=\"btn btn-secondary ${safe.class}\" title=\"${safe.title}\">\n                    ${safe.icon}\n                </a>`\n\n            actions.push(tmpl)\n        }\n\n        actions = actions.join('')\n\n        let tmpl = `\n            <li class=\"list-group-item list-editor-item\" data-object=\"${safe.object}\" data-index=\"${index}\">\n                <div class=\"d-flex w-100 justify-content-between\">\n                    <h5 class=\"mb-1\">${safe.title}</h5>\n                    <div>\n                        <div class=\"btn-group btn-group-sm\" role=\"group\" aria-label=\"Action\">\n                            ${actions}\n                        </div>\n                    </div>\n                </div>\n                <small>${infos}</small>\n            </li>`\n\n        $(this._el.list).append(tmpl)\n    }\n\n    _getConfig(config){\n        let conf = {}\n        for(let k in Default){\n            if('items' === k){\n                conf[k] = {}\n                if(config[k]){\n                    for(let j in config[k])\n                        conf[k][j] = typeof config[k][j] === 'undefined' ? Default[k][j] : config[k][j]\n                }\n            }else{\n                conf[k] = typeof config[k] === 'undefined' ? Default[k] : config[k]\n            }\n        }\n\n        return conf\n    }\n\n    _hs(text){\n        return text\n          .replace(/&/g, \"&amp;\")\n          .replace(/</g, \"&lt;\")\n          .replace(/>/g, \"&gt;\")\n          .replace(/\"/g, \"&quot;\")\n          .replace(/'/g, \"&#039;\");\n    }\n\n    _redrawItems(){\n        this._value = this._el.model.value\n\n        try{\n            this._value = JSON.parse(this._value)\n        }catch(e){\n            this._value = []\n        }\n\n        this._el.list.innerHTML = ''\n        this._value.forEach((item,index) => this._drawItem(item,index))\n    }\n\n    _updateModel(){\n        let value = []\n\n        for(let i=0; i<this._el.list.children.length; i++){\n            let item = this._el.list.children[i]\n            value.push( JSON.parse(item.dataset.object) )\n        }\n\n        this._value = value\n        this._el.model.value = JSON.stringify(value)\n    }\n}\n\nwindow.ListEditor = ListEditor\nexport default ListEditor"]}